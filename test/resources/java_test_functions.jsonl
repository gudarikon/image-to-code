{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java", "func_name": "QueueDrainObserver.fastPathOrderedEmit", "original_string": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\n        final Observer<? super V> observer = downstream;\n        final SimplePlainQueue<U> q = queue;\n\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\n            if (q.isEmpty()) {\n                accept(observer, value);\n                if (leave(-1) == 0) {\n                    return;\n                }\n            } else {\n                q.offer(value);\n            }\n        } else {\n            q.offer(value);\n            if (!enter()) {\n                return;\n            }\n        }\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\n    }", "language": "java", "code": "protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\n        final Observer<? super V> observer = downstream;\n        final SimplePlainQueue<U> q = queue;\n\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\n            if (q.isEmpty()) {\n                accept(observer, value);\n                if (leave(-1) == 0) {\n                    return;\n                }\n            } else {\n                q.offer(value);\n            }\n        } else {\n            q.offer(value);\n            if (!enter()) {\n                return;\n            }\n        }\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\n    }", "code_tokens": ["protected", "final", "void", "fastPathOrderedEmit", "(", "U", "value", ",", "boolean", "delayError", ",", "Disposable", "disposable", ")", "{", "final", "Observer", "<", "?", "super", "V", ">", "observer", "=", "downstream", ";", "final", "SimplePlainQueue", "<", "U", ">", "q", "=", "queue", ";", "if", "(", "wip", ".", "get", "(", ")", "==", "0", "&&", "wip", ".", "compareAndSet", "(", "0", ",", "1", ")", ")", "{", "if", "(", "q", ".", "isEmpty", "(", ")", ")", "{", "accept", "(", "observer", ",", "value", ")", ";", "if", "(", "leave", "(", "-", "1", ")", "==", "0", ")", "{", "return", ";", "}", "}", "else", "{", "q", ".", "offer", "(", "value", ")", ";", "}", "}", "else", "{", "q", ".", "offer", "(", "value", ")", ";", "if", "(", "!", "enter", "(", ")", ")", "{", "return", ";", "}", "}", "QueueDrainHelper", ".", "drainLoop", "(", "q", ",", "observer", ",", "delayError", ",", "disposable", ",", "this", ")", ";", "}"], "docstring": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "docstring_tokens": ["Makes", "sure", "the", "fast", "-", "path", "emits", "in", "order", "."], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java#L88-L108", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.amb", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> amb(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(null, sources));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> amb(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(null, sources));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "amb", "(", "Iterable", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableAmb", "<", "T", ">", "(", "null", ",", "sources", ")", ")", ";", "}"], "docstring": "Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends\na termination notification.\n<p>\n<img width=\"640\" height=\"385\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code amb} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element type\n@param sources\nan Iterable of ObservableSource sources competing to react first. A subscription to each source will\noccur in the same order as in the Iterable.\n@return an Observable that emits the same sequence as whichever of the source ObservableSources first\nemitted an item or sent a termination notification\n@see <a href=\"http://reactivex.io/documentation/operators/amb.html\">ReactiveX operators documentation: Amb</a>", "docstring_tokens": ["Mirrors", "the", "one", "ObservableSource", "in", "an", "Iterable", "of", "several", "ObservableSources", "that", "first", "either", "emits", "an", "item", "or", "sends", "a", "termination", "notification", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "385", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "amb", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "amb", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.ambArray", "original_string": "@SuppressWarnings(\"unchecked\")\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> ambArray(ObservableSource<? extends T>... sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        int len = sources.length;\n        if (len == 0) {\n            return empty();\n        }\n        if (len == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(sources, null));\n    }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> ambArray(ObservableSource<? extends T>... sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        int len = sources.length;\n        if (len == 0) {\n            return empty();\n        }\n        if (len == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableAmb<T>(sources, null));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "ambArray", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "int", "len", "=", "sources", ".", "length", ";", "if", "(", "len", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "if", "(", "len", "==", "1", ")", "{", "return", "(", "Observable", "<", "T", ">", ")", "wrap", "(", "sources", "[", "0", "]", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableAmb", "<", "T", ">", "(", "sources", ",", "null", ")", ")", ";", "}"], "docstring": "Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends\na termination notification.\n<p>\n<img width=\"640\" height=\"385\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code ambArray} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element type\n@param sources\nan array of ObservableSource sources competing to react first. A subscription to each source will\noccur in the same order as in the array.\n@return an Observable that emits the same sequence as whichever of the source ObservableSources first\nemitted an item or sent a termination notification\n@see <a href=\"http://reactivex.io/documentation/operators/amb.html\">ReactiveX operators documentation: Amb</a>", "docstring_tokens": ["Mirrors", "the", "one", "ObservableSource", "in", "an", "array", "of", "several", "ObservableSources", "that", "first", "either", "emits", "an", "item", "or", "sends", "a", "termination", "notification", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "385", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "amb", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "ambArray", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concat", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return fromIterable(sources).concatMapDelayError((Function)Functions.identity(), bufferSize(), false);\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(Iterable<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return fromIterable(sources).concatMapDelayError((Function)Functions.identity(), bufferSize(), false);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concat", "(", "Iterable", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "return", "fromIterable", "(", "sources", ")", ".", "concatMapDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "bufferSize", "(", ")", ",", "false", ")", ";", "}"], "docstring": "Concatenates elements of each ObservableSource provided via an Iterable sequence into a single sequence\nof elements without interleaving them.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concat} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the common value type of the sources\n@param sources the Iterable sequence of ObservableSources\n@return the new Observable instance", "docstring_tokens": ["Concatenates", "elements", "of", "each", "ObservableSource", "provided", "via", "an", "Iterable", "sequence", "into", "a", "single", "sequence", "of", "elements", "without", "interleaving", "them", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concat", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1099-L1106", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concat", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(ObservableSource<? extends ObservableSource<? extends T>> sources, int prefetch) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        ObjectHelper.verifyPositive(prefetch, \"prefetch\");\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(sources, Functions.identity(), prefetch, ErrorMode.IMMEDIATE));\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concat(ObservableSource<? extends ObservableSource<? extends T>> sources, int prefetch) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        ObjectHelper.verifyPositive(prefetch, \"prefetch\");\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(sources, Functions.identity(), prefetch, ErrorMode.IMMEDIATE));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concat", "(", "ObservableSource", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ",", "int", "prefetch", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "ObjectHelper", ".", "verifyPositive", "(", "prefetch", ",", "\"prefetch\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableConcatMap", "(", "sources", ",", "Functions", ".", "identity", "(", ")", ",", "prefetch", ",", "ErrorMode", ".", "IMMEDIATE", ")", ")", ";", "}"], "docstring": "Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source\nObservableSource, one after the other, without interleaving them.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concat} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources\nan ObservableSource that emits ObservableSources\n@param prefetch\nthe number of ObservableSources to prefetch from the sources sequence.\n@return an Observable that emits items all of the items emitted by the ObservableSources emitted by\n{@code ObservableSources}, one after the other, without interleaving them\n@see <a href=\"http://reactivex.io/documentation/operators/concat.html\">ReactiveX operators documentation: Concat</a>", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "the", "items", "emitted", "by", "each", "of", "the", "ObservableSources", "emitted", "by", "the", "source", "ObservableSource", "one", "after", "the", "other", "without", "interleaving", "them", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concat", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "concat", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArray", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArray(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return wrap((ObservableSource<T>)sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(fromArray(sources), Functions.identity(), bufferSize(), ErrorMode.BOUNDARY));\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArray(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return wrap((ObservableSource<T>)sources[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(fromArray(sources), Functions.identity(), bufferSize(), ErrorMode.BOUNDARY));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArray", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "if", "(", "sources", ".", "length", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "else", "if", "(", "sources", ".", "length", "==", "1", ")", "{", "return", "wrap", "(", "(", "ObservableSource", "<", "T", ">", ")", "sources", "[", "0", "]", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableConcatMap", "(", "fromArray", "(", "sources", ")", ",", "Functions", ".", "identity", "(", ")", ",", "bufferSize", "(", ")", ",", "ErrorMode", ".", "BOUNDARY", ")", ")", ";", "}"], "docstring": "Concatenates a variable number of ObservableSource sources.\n<p>\nNote: named this way because of overload conflict with concat(ObservableSource&lt;ObservableSource&gt;)\n<p>\n<img width=\"640\" height=\"290\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArray.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatArray} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param sources the array of sources\n@param <T> the common base value type\n@return the new Observable instance\n@throws NullPointerException if sources is null", "docstring_tokens": ["Concatenates", "a", "variable", "number", "of", "ObservableSource", "sources", ".", "<p", ">", "Note", ":", "named", "this", "way", "because", "of", "overload", "conflict", "with", "concat", "(", "ObservableSource&lt", ";", "ObservableSource&gt", ";", ")", "<p", ">", "<img", "width", "=", "640", "height", "=", "290", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArray", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayDelayError", "original_string": "@SuppressWarnings({ \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayDelayError(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return concatDelayError(fromArray(sources));\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayDelayError(ObservableSource<? extends T>... sources) {\n        if (sources.length == 0) {\n            return empty();\n        } else\n        if (sources.length == 1) {\n            return (Observable<T>)wrap(sources[0]);\n        }\n        return concatDelayError(fromArray(sources));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayDelayError", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "if", "(", "sources", ".", "length", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "else", "if", "(", "sources", ".", "length", "==", "1", ")", "{", "return", "(", "Observable", "<", "T", ">", ")", "wrap", "(", "sources", "[", "0", "]", ")", ";", "}", "return", "concatDelayError", "(", "fromArray", "(", "sources", ")", ")", ";", "}"], "docstring": "Concatenates a variable number of ObservableSource sources and delays errors from any of them\ntill all terminate.\n<p>\n<img width=\"640\" height=\"290\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArray.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatArrayDelayError} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param sources the array of sources\n@param <T> the common base value type\n@return the new Observable instance\n@throws NullPointerException if sources is null", "docstring_tokens": ["Concatenates", "a", "variable", "number", "of", "ObservableSource", "sources", "and", "delays", "errors", "from", "any", "of", "them", "till", "all", "terminate", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "290", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArray", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1302-L1313", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayEager", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(ObservableSource<? extends T>... sources) {\n        return concatArrayEager(bufferSize(), bufferSize(), sources);\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(ObservableSource<? extends T>... sources) {\n        return concatArrayEager(bufferSize(), bufferSize(), sources);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayEager", "(", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "concatArrayEager", "(", "bufferSize", "(", ")", ",", "bufferSize", "(", ")", ",", "sources", ")", ";", "}"], "docstring": "Concatenates an array of ObservableSources eagerly into a single stream of values.\n<p>\n<img width=\"640\" height=\"410\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.png\" alt=\"\">\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource ObservableSources. The operator buffers the values emitted by these ObservableSources and then drains them\nin order, each one after the previous one completes.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources an array of ObservableSources that need to be eagerly concatenated\n@return the new ObservableSource instance with the specified concatenation behavior\n@since 2.0", "docstring_tokens": ["Concatenates", "an", "array", "of", "ObservableSources", "eagerly", "into", "a", "single", "stream", "of", "values", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "410", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArrayEager", ".", "png", "alt", "=", ">", "<p", ">", "Eager", "concatenation", "means", "that", "once", "a", "subscriber", "subscribes", "this", "operator", "subscribes", "to", "all", "of", "the", "source", "ObservableSources", ".", "The", "operator", "buffers", "the", "values", "emitted", "by", "these", "ObservableSources", "and", "then", "drains", "them", "in", "order", "each", "one", "after", "the", "previous", "one", "completes", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "This", "method", "does", "not", "operate", "by", "default", "on", "a", "particular", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1332-L1336", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayEager", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, false);\n    }", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEager(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, false);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayEager", "(", "int", "maxConcurrency", ",", "int", "prefetch", ",", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "fromArray", "(", "sources", ")", ".", "concatMapEagerDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "maxConcurrency", ",", "prefetch", ",", "false", ")", ";", "}"], "docstring": "Concatenates an array of ObservableSources eagerly into a single stream of values.\n<p>\n<img width=\"640\" height=\"495\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.nn.png\" alt=\"\">\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource ObservableSources. The operator buffers the values emitted by these ObservableSources and then drains them\nin order, each one after the previous one completes.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources an array of ObservableSources that need to be eagerly concatenated\n@param maxConcurrency the maximum number of concurrent subscriptions at a time, Integer.MAX_VALUE\nis interpreted as indication to subscribe to all sources at once\n@param prefetch the number of elements to prefetch from each ObservableSource source\n@return the new ObservableSource instance with the specified concatenation behavior\n@since 2.0", "docstring_tokens": ["Concatenates", "an", "array", "of", "ObservableSources", "eagerly", "into", "a", "single", "stream", "of", "values", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "495", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatArrayEager", ".", "nn", ".", "png", "alt", "=", ">", "<p", ">", "Eager", "concatenation", "means", "that", "once", "a", "subscriber", "subscribes", "this", "operator", "subscribes", "to", "all", "of", "the", "source", "ObservableSources", ".", "The", "operator", "buffers", "the", "values", "emitted", "by", "these", "ObservableSources", "and", "then", "drains", "them", "in", "order", "each", "one", "after", "the", "previous", "one", "completes", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "This", "method", "does", "not", "operate", "by", "default", "on", "a", "particular", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1358-L1363", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatArrayEagerDelayError", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEagerDelayError(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, true);\n    }", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatArrayEagerDelayError(int maxConcurrency, int prefetch, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, true);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatArrayEagerDelayError", "(", "int", "maxConcurrency", ",", "int", "prefetch", ",", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "fromArray", "(", "sources", ")", ".", "concatMapEagerDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "maxConcurrency", ",", "prefetch", ",", "true", ")", ";", "}"], "docstring": "Concatenates an array of {@link ObservableSource}s eagerly into a single stream of values\nand delaying any errors until all sources terminate.\n<p>\n<img width=\"640\" height=\"460\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEagerDelayError.nn.png\" alt=\"\">\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource {@code ObservableSource}s. The operator buffers the values emitted by these {@code ObservableSource}s\nand then drains them in order, each one after the previous one completes.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources an array of {@code ObservableSource}s that need to be eagerly concatenated\n@param maxConcurrency the maximum number of concurrent subscriptions at a time, Integer.MAX_VALUE\nis interpreted as indication to subscribe to all sources at once\n@param prefetch the number of elements to prefetch from each {@code ObservableSource} source\n@return the new Observable instance with the specified concatenation behavior\n@since 2.2.1 - experimental", "docstring_tokens": ["Concatenates", "an", "array", "of", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1410-L1415", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatDelayError", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatDelayError(ObservableSource<? extends ObservableSource<? extends T>> sources) {\n        return concatDelayError(sources, bufferSize(), true);\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatDelayError(ObservableSource<? extends ObservableSource<? extends T>> sources) {\n        return concatDelayError(sources, bufferSize(), true);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatDelayError", "(", "ObservableSource", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ")", "{", "return", "concatDelayError", "(", "sources", ",", "bufferSize", "(", ")", ",", "true", ")", ";", "}"], "docstring": "Concatenates the ObservableSource sequence of ObservableSources into a single sequence by subscribing to each inner ObservableSource,\none after the other, one at a time and delays any errors till the all inner and the outer ObservableSources terminate.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatDelayError.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatDelayError} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources the ObservableSource sequence of ObservableSources\n@return the new ObservableSource with the concatenating behavior", "docstring_tokens": ["Concatenates", "the", "ObservableSource", "sequence", "of", "ObservableSources", "into", "a", "single", "sequence", "by", "subscribing", "to", "each", "inner", "ObservableSource", "one", "after", "the", "other", "one", "at", "a", "time", "and", "delays", "any", "errors", "till", "the", "all", "inner", "and", "the", "outer", "ObservableSources", "terminate", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatDelayError", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "concatDelayError", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1453-L1457", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatDelayError", "original_string": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatDelayError(ObservableSource<? extends ObservableSource<? extends T>> sources, int prefetch, boolean tillTheEnd) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        ObjectHelper.verifyPositive(prefetch, \"prefetch is null\");\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(sources, Functions.identity(), prefetch, tillTheEnd ? ErrorMode.END : ErrorMode.BOUNDARY));\n    }", "language": "java", "code": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatDelayError(ObservableSource<? extends ObservableSource<? extends T>> sources, int prefetch, boolean tillTheEnd) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        ObjectHelper.verifyPositive(prefetch, \"prefetch is null\");\n        return RxJavaPlugins.onAssembly(new ObservableConcatMap(sources, Functions.identity(), prefetch, tillTheEnd ? ErrorMode.END : ErrorMode.BOUNDARY));\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"rawtypes\"", ",", "\"unchecked\"", "}", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatDelayError", "(", "ObservableSource", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ",", "int", "prefetch", ",", "boolean", "tillTheEnd", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "ObjectHelper", ".", "verifyPositive", "(", "prefetch", ",", "\"prefetch is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableConcatMap", "(", "sources", ",", "Functions", ".", "identity", "(", ")", ",", "prefetch", ",", "tillTheEnd", "?", "ErrorMode", ".", "END", ":", "ErrorMode", ".", "BOUNDARY", ")", ")", ";", "}"], "docstring": "Concatenates the ObservableSource sequence of ObservableSources into a single sequence by subscribing to each inner ObservableSource,\none after the other, one at a time and delays any errors till the all inner and the outer ObservableSources terminate.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatDelayError.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatDelayError} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources the ObservableSource sequence of ObservableSources\n@param prefetch the number of elements to prefetch from the outer ObservableSource\n@param tillTheEnd if true exceptions from the outer and all inner ObservableSources are delayed to the end\nif false, exception from the outer ObservableSource is delayed till the current ObservableSource terminates\n@return the new ObservableSource with the concatenating behavior", "docstring_tokens": ["Concatenates", "the", "ObservableSource", "sequence", "of", "ObservableSources", "into", "a", "single", "sequence", "by", "subscribing", "to", "each", "inner", "ObservableSource", "one", "after", "the", "other", "one", "at", "a", "time", "and", "delays", "any", "errors", "till", "the", "all", "inner", "and", "the", "outer", "ObservableSources", "terminate", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatDelayError", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "concatDelayError", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1476-L1484", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatEager", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatEager(ObservableSource<? extends ObservableSource<? extends T>> sources, int maxConcurrency, int prefetch) {\n        return wrap(sources).concatMapEager((Function)Functions.identity(), maxConcurrency, prefetch);\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatEager(ObservableSource<? extends ObservableSource<? extends T>> sources, int maxConcurrency, int prefetch) {\n        return wrap(sources).concatMapEager((Function)Functions.identity(), maxConcurrency, prefetch);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatEager", "(", "ObservableSource", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ",", "int", "maxConcurrency", ",", "int", "prefetch", ")", "{", "return", "wrap", "(", "sources", ")", ".", "concatMapEager", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "maxConcurrency", ",", "prefetch", ")", ";", "}"], "docstring": "Concatenates an ObservableSource sequence of ObservableSources eagerly into a single stream of values.\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nemitted source ObservableSources as they are observed. The operator buffers the values emitted by these\nObservableSources and then drains them in order, each one after the previous one completes.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatEager.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources a sequence of ObservableSources that need to be eagerly concatenated\n@param maxConcurrency the maximum number of concurrently running inner ObservableSources; Integer.MAX_VALUE\nis interpreted as all inner ObservableSources can be active at the same time\n@param prefetch the number of elements to prefetch from each inner ObservableSource source\n@return the new ObservableSource instance with the specified concatenation behavior\n@since 2.0", "docstring_tokens": ["Concatenates", "an", "ObservableSource", "sequence", "of", "ObservableSources", "eagerly", "into", "a", "single", "stream", "of", "values", ".", "<p", ">", "Eager", "concatenation", "means", "that", "once", "a", "subscriber", "subscribes", "this", "operator", "subscribes", "to", "all", "of", "the", "emitted", "source", "ObservableSources", "as", "they", "are", "observed", ".", "The", "operator", "buffers", "the", "values", "emitted", "by", "these", "ObservableSources", "and", "then", "drains", "them", "in", "order", "each", "one", "after", "the", "previous", "one", "completes", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatEager", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "This", "method", "does", "not", "operate", "by", "default", "on", "a", "particular", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1529-L1534", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.concatEager", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatEager(Iterable<? extends ObservableSource<? extends T>> sources, int maxConcurrency, int prefetch) {\n        return fromIterable(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, false);\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> concatEager(Iterable<? extends ObservableSource<? extends T>> sources, int maxConcurrency, int prefetch) {\n        return fromIterable(sources).concatMapEagerDelayError((Function)Functions.identity(), maxConcurrency, prefetch, false);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "concatEager", "(", "Iterable", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ",", "int", "maxConcurrency", ",", "int", "prefetch", ")", "{", "return", "fromIterable", "(", "sources", ")", ".", "concatMapEagerDelayError", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "maxConcurrency", ",", "prefetch", ",", "false", ")", ";", "}"], "docstring": "Concatenates a sequence of ObservableSources eagerly into a single stream of values.\n<p>\nEager concatenation means that once a subscriber subscribes, this operator subscribes to all of the\nsource ObservableSources. The operator buffers the values emitted by these ObservableSources and then drains them\nin order, each one after the previous one completes.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatEager.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>This method does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type\n@param sources a sequence of ObservableSources that need to be eagerly concatenated\n@param maxConcurrency the maximum number of concurrently running inner ObservableSources; Integer.MAX_VALUE\nis interpreted as all inner ObservableSources can be active at the same time\n@param prefetch the number of elements to prefetch from each inner ObservableSource source\n@return the new ObservableSource instance with the specified concatenation behavior\n@since 2.0", "docstring_tokens": ["Concatenates", "a", "sequence", "of", "ObservableSources", "eagerly", "into", "a", "single", "stream", "of", "values", ".", "<p", ">", "Eager", "concatenation", "means", "that", "once", "a", "subscriber", "subscribes", "this", "operator", "subscribes", "to", "all", "of", "the", "source", "ObservableSources", ".", "The", "operator", "buffers", "the", "values", "emitted", "by", "these", "ObservableSources", "and", "then", "drains", "them", "in", "order", "each", "one", "after", "the", "previous", "one", "completes", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "concatEager", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "This", "method", "does", "not", "operate", "by", "default", "on", "a", "particular", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1579-L1584", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.empty", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    @SuppressWarnings(\"unchecked\")\n    public static <T> Observable<T> empty() {\n        return RxJavaPlugins.onAssembly((Observable<T>) ObservableEmpty.INSTANCE);\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    @SuppressWarnings(\"unchecked\")\n    public static <T> Observable<T> empty() {\n        return RxJavaPlugins.onAssembly((Observable<T>) ObservableEmpty.INSTANCE);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "empty", "(", ")", "{", "return", "RxJavaPlugins", ".", "onAssembly", "(", "(", "Observable", "<", "T", ">", ")", "ObservableEmpty", ".", "INSTANCE", ")", ";", "}"], "docstring": "Returns an Observable that emits no items to the {@link Observer} and immediately invokes its\n{@link Observer#onComplete onComplete} method.\n<p>\n<img width=\"640\" height=\"190\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/empty.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code empty} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T>\nthe type of the items (ostensibly) emitted by the ObservableSource\n@return an Observable that emits no items to the {@link Observer} but immediately invokes the\n{@link Observer}'s {@link Observer#onComplete() onComplete} method\n@see <a href=\"http://reactivex.io/documentation/operators/empty-never-throw.html\">ReactiveX operators documentation: Empty</a>", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "no", "items", "to", "the", "{", "@link", "Observer", "}", "and", "immediately", "invokes", "its", "{", "@link", "Observer#onComplete", "onComplete", "}", "method", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "190", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "empty", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "empty", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1686-L1691", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.error", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> error(Callable<? extends Throwable> errorSupplier) {\n        ObjectHelper.requireNonNull(errorSupplier, \"errorSupplier is null\");\n        return RxJavaPlugins.onAssembly(new ObservableError<T>(errorSupplier));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> error(Callable<? extends Throwable> errorSupplier) {\n        ObjectHelper.requireNonNull(errorSupplier, \"errorSupplier is null\");\n        return RxJavaPlugins.onAssembly(new ObservableError<T>(errorSupplier));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "error", "(", "Callable", "<", "?", "extends", "Throwable", ">", "errorSupplier", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "errorSupplier", ",", "\"errorSupplier is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableError", "<", "T", ">", "(", "errorSupplier", ")", ")", ";", "}"], "docstring": "Returns an Observable that invokes an {@link Observer}'s {@link Observer#onError onError} method when the\nObserver subscribes to it.\n<p>\n<img width=\"640\" height=\"220\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/error.supplier.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code error} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param errorSupplier\na Callable factory to return a Throwable for each individual Observer\n@param <T>\nthe type of the items (ostensibly) emitted by the ObservableSource\n@return an Observable that invokes the {@link Observer}'s {@link Observer#onError onError} method when\nthe Observer subscribes to it\n@see <a href=\"http://reactivex.io/documentation/operators/empty-never-throw.html\">ReactiveX operators documentation: Throw</a>", "docstring_tokens": ["Returns", "an", "Observable", "that", "invokes", "an", "{", "@link", "Observer", "}", "s", "{", "@link", "Observer#onError", "onError", "}", "method", "when", "the", "Observer", "subscribes", "to", "it", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "220", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "error", ".", "supplier", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "error", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.fromArray", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    @NonNull\n    public static <T> Observable<T> fromArray(T... items) {\n        ObjectHelper.requireNonNull(items, \"items is null\");\n        if (items.length == 0) {\n            return empty();\n        } else\n        if (items.length == 1) {\n            return just(items[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableFromArray<T>(items));\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    @NonNull\n    public static <T> Observable<T> fromArray(T... items) {\n        ObjectHelper.requireNonNull(items, \"items is null\");\n        if (items.length == 0) {\n            return empty();\n        } else\n        if (items.length == 1) {\n            return just(items[0]);\n        }\n        return RxJavaPlugins.onAssembly(new ObservableFromArray<T>(items));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "@", "NonNull", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "fromArray", "(", "T", "...", "items", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "items", ",", "\"items is null\"", ")", ";", "if", "(", "items", ".", "length", "==", "0", ")", "{", "return", "empty", "(", ")", ";", "}", "else", "if", "(", "items", ".", "length", "==", "1", ")", "{", "return", "just", "(", "items", "[", "0", "]", ")", ";", "}", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableFromArray", "<", "T", ">", "(", "items", ")", ")", ";", "}"], "docstring": "Converts an Array into an ObservableSource that emits the items in the Array.\n<p>\n<img width=\"640\" height=\"315\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/from.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromArray} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param items\nthe array of elements\n@param <T>\nthe type of items in the Array and the type of items to be emitted by the resulting ObservableSource\n@return an Observable that emits each item in the source Array\n@see <a href=\"http://reactivex.io/documentation/operators/from.html\">ReactiveX operators documentation: From</a>", "docstring_tokens": ["Converts", "an", "Array", "into", "an", "ObservableSource", "that", "emits", "the", "items", "in", "the", "Array", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "315", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "from", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "fromArray", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.fromIterable", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> fromIterable(Iterable<? extends T> source) {\n        ObjectHelper.requireNonNull(source, \"source is null\");\n        return RxJavaPlugins.onAssembly(new ObservableFromIterable<T>(source));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> fromIterable(Iterable<? extends T> source) {\n        ObjectHelper.requireNonNull(source, \"source is null\");\n        return RxJavaPlugins.onAssembly(new ObservableFromIterable<T>(source));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "fromIterable", "(", "Iterable", "<", "?", "extends", "T", ">", "source", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "source", ",", "\"source is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableFromIterable", "<", "T", ">", "(", "source", ")", ")", ";", "}"], "docstring": "Converts an {@link Iterable} sequence into an ObservableSource that emits the items in the sequence.\n<p>\n<img width=\"640\" height=\"186\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromIterable.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromIterable} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param source\nthe source {@link Iterable} sequence\n@param <T>\nthe type of items in the {@link Iterable} sequence and the type of items to be emitted by the\nresulting ObservableSource\n@return an Observable that emits each item in the source {@link Iterable} sequence\n@see <a href=\"http://reactivex.io/documentation/operators/from.html\">ReactiveX operators documentation: From</a>", "docstring_tokens": ["Converts", "an", "{", "@link", "Iterable", "}", "sequence", "into", "an", "ObservableSource", "that", "emits", "the", "items", "in", "the", "sequence", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "186", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "fromIterable", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "fromIterable", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.fromPublisher", "original_string": "@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> fromPublisher(Publisher<? extends T> publisher) {\n        ObjectHelper.requireNonNull(publisher, \"publisher is null\");\n        return RxJavaPlugins.onAssembly(new ObservableFromPublisher<T>(publisher));\n    }", "language": "java", "code": "@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> fromPublisher(Publisher<? extends T> publisher) {\n        ObjectHelper.requireNonNull(publisher, \"publisher is null\");\n        return RxJavaPlugins.onAssembly(new ObservableFromPublisher<T>(publisher));\n    }", "code_tokens": ["@", "BackpressureSupport", "(", "BackpressureKind", ".", "UNBOUNDED_IN", ")", "@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "fromPublisher", "(", "Publisher", "<", "?", "extends", "T", ">", "publisher", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "publisher", ",", "\"publisher is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableFromPublisher", "<", "T", ">", "(", "publisher", ")", ")", ";", "}"], "docstring": "Converts an arbitrary Reactive-Streams Publisher into an Observable.\n<p>\n<img width=\"640\" height=\"344\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromPublisher.o.png\" alt=\"\">\n<p>\nThe {@link Publisher} must follow the\n<a href=\"https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams\">Reactive-Streams specification</a>.\nViolating the specification may result in undefined behavior.\n<p>\nIf possible, use {@link #create(ObservableOnSubscribe)} to create a\nsource-like {@code Observable} instead.\n<p>\nNote that even though {@link Publisher} appears to be a functional interface, it\nis not recommended to implement it through a lambda as the specification requires\nstate management that is not achievable with a stateless lambda.\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The source {@code publisher} is consumed in an unbounded fashion without applying any\nbackpressure to it.</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromPublisher} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the value type of the flow\n@param publisher the Publisher to convert\n@return the new Observable instance\n@throws NullPointerException if publisher is null\n@see #create(ObservableOnSubscribe)", "docstring_tokens": ["Converts", "an", "arbitrary", "Reactive", "-", "Streams", "Publisher", "into", "an", "Observable", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "344", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "fromPublisher", ".", "o", ".", "png", "alt", "=", ">", "<p", ">", "The", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2015-L2022", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.generate", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> generate(final Consumer<Emitter<T>> generator) {\n        ObjectHelper.requireNonNull(generator, \"generator is null\");\n        return generate(Functions.<Object>nullSupplier(),\n        ObservableInternalHelper.simpleGenerator(generator), Functions.<Object>emptyConsumer());\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> generate(final Consumer<Emitter<T>> generator) {\n        ObjectHelper.requireNonNull(generator, \"generator is null\");\n        return generate(Functions.<Object>nullSupplier(),\n        ObservableInternalHelper.simpleGenerator(generator), Functions.<Object>emptyConsumer());\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "generate", "(", "final", "Consumer", "<", "Emitter", "<", "T", ">", ">", "generator", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "generator", ",", "\"generator is null\"", ")", ";", "return", "generate", "(", "Functions", ".", "<", "Object", ">", "nullSupplier", "(", ")", ",", "ObservableInternalHelper", ".", "simpleGenerator", "(", "generator", ")", ",", "Functions", ".", "<", "Object", ">", "emptyConsumer", "(", ")", ")", ";", "}"], "docstring": "Returns a cold, synchronous and stateless generator of values.\n<p>\n<img width=\"640\" height=\"315\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/generate.2.png\" alt=\"\">\n<p>\nNote that the {@link Emitter#onNext}, {@link Emitter#onError} and\n{@link Emitter#onComplete} methods provided to the function via the {@link Emitter} instance should be called synchronously,\nnever concurrently and only while the function body is executing. Calling them from multiple threads\nor outside the function call is not supported and leads to an undefined behavior.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code generate} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the generated value type\n@param generator the Consumer called whenever a particular downstream Observer has\nrequested a value. The callback then should call {@code onNext}, {@code onError} or\n{@code onComplete} to signal a value or a terminal event. Signalling multiple {@code onNext}\nin a call will make the operator signal {@code IllegalStateException}.\n@return the new Observable instance", "docstring_tokens": ["Returns", "a", "cold", "synchronous", "and", "stateless", "generator", "of", "values", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "315", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "generate", ".", "2", ".", "png", "alt", "=", ">", "<p", ">", "Note", "that", "the", "{", "@link", "Emitter#onNext", "}", "{", "@link", "Emitter#onError", "}", "and", "{", "@link", "Emitter#onComplete", "}", "methods", "provided", "to", "the", "function", "via", "the", "{", "@link", "Emitter", "}", "instance", "should", "be", "called", "synchronously", "never", "concurrently", "and", "only", "while", "the", "function", "body", "is", "executing", ".", "Calling", "them", "from", "multiple", "threads", "or", "outside", "the", "function", "call", "is", "not", "supported", "and", "leads", "to", "an", "undefined", "behavior", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "generate", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2045-L2052", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.generate", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T, S> Observable<T> generate(Callable<S> initialState, BiFunction<S, Emitter<T>, S> generator) {\n        return generate(initialState, generator, Functions.emptyConsumer());\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T, S> Observable<T> generate(Callable<S> initialState, BiFunction<S, Emitter<T>, S> generator) {\n        return generate(initialState, generator, Functions.emptyConsumer());\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ",", "S", ">", "Observable", "<", "T", ">", "generate", "(", "Callable", "<", "S", ">", "initialState", ",", "BiFunction", "<", "S", ",", "Emitter", "<", "T", ">", ",", "S", ">", "generator", ")", "{", "return", "generate", "(", "initialState", ",", "generator", ",", "Functions", ".", "emptyConsumer", "(", ")", ")", ";", "}"], "docstring": "Returns a cold, synchronous and stateful generator of values.\n<p>\n<img width=\"640\" height=\"315\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/generate.2.png\" alt=\"\">\n<p>\nNote that the {@link Emitter#onNext}, {@link Emitter#onError} and\n{@link Emitter#onComplete} methods provided to the function via the {@link Emitter} instance should be called synchronously,\nnever concurrently and only while the function body is executing. Calling them from multiple threads\nor outside the function call is not supported and leads to an undefined behavior.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code generate} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <S> the type of the per-Observer state\n@param <T> the generated value type\n@param initialState the Callable to generate the initial state for each Observer\n@param generator the Function called with the current state whenever a particular downstream Observer has\nrequested a value. The callback then should call {@code onNext}, {@code onError} or\n{@code onComplete} to signal a value or a terminal event and should return a (new) state for\nthe next invocation. Signalling multiple {@code onNext}\nin a call will make the operator signal {@code IllegalStateException}.\n@return the new Observable instance", "docstring_tokens": ["Returns", "a", "cold", "synchronous", "and", "stateful", "generator", "of", "values", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "315", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "generate", ".", "2", ".", "png", "alt", "=", ">", "<p", ">", "Note", "that", "the", "{", "@link", "Emitter#onNext", "}", "{", "@link", "Emitter#onError", "}", "and", "{", "@link", "Emitter#onComplete", "}", "methods", "provided", "to", "the", "function", "via", "the", "{", "@link", "Emitter", "}", "instance", "should", "be", "called", "synchronously", "never", "concurrently", "and", "only", "while", "the", "function", "body", "is", "executing", ".", "Calling", "them", "from", "multiple", "threads", "or", "outside", "the", "function", "call", "is", "not", "supported", "and", "leads", "to", "an", "undefined", "behavior", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "generate", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2145-L2149", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.interval", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit, Scheduler scheduler) {\n        ObjectHelper.requireNonNull(unit, \"unit is null\");\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n\n        return RxJavaPlugins.onAssembly(new ObservableInterval(Math.max(0L, initialDelay), Math.max(0L, period), unit, scheduler));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit, Scheduler scheduler) {\n        ObjectHelper.requireNonNull(unit, \"unit is null\");\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n\n        return RxJavaPlugins.onAssembly(new ObservableInterval(Math.max(0L, initialDelay), Math.max(0L, period), unit, scheduler));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "CUSTOM", ")", "public", "static", "Observable", "<", "Long", ">", "interval", "(", "long", "initialDelay", ",", "long", "period", ",", "TimeUnit", "unit", ",", "Scheduler", "scheduler", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "unit", ",", "\"unit is null\"", ")", ";", "ObjectHelper", ".", "requireNonNull", "(", "scheduler", ",", "\"scheduler is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableInterval", "(", "Math", ".", "max", "(", "0L", ",", "initialDelay", ")", ",", "Math", ".", "max", "(", "0L", ",", "period", ")", ",", "unit", ",", "scheduler", ")", ")", ";", "}"], "docstring": "Returns an Observable that emits a {@code 0L} after the {@code initialDelay} and ever increasing numbers\nafter each {@code period} of time thereafter, on a specified {@link Scheduler}.\n<p>\n<img width=\"640\" height=\"200\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timer.ps.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>You specify which {@link Scheduler} this operator will use.</dd>\n</dl>\n\n@param initialDelay\nthe initial delay time to wait before emitting the first value of 0L\n@param period\nthe period of time between emissions of the subsequent numbers\n@param unit\nthe time unit for both {@code initialDelay} and {@code period}\n@param scheduler\nthe Scheduler on which the waiting happens and items are emitted\n@return an Observable that emits a 0L after the {@code initialDelay} and ever increasing numbers after\neach {@code period} of time thereafter, while running on the given Scheduler\n@see <a href=\"http://reactivex.io/documentation/operators/interval.html\">ReactiveX operators documentation: Interval</a>\n@since 1.0.12", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "a", "{", "@code", "0L", "}", "after", "the", "{", "@code", "initialDelay", "}", "and", "ever", "increasing", "numbers", "after", "each", "{", "@code", "period", "}", "of", "time", "thereafter", "on", "a", "specified", "{", "@link", "Scheduler", "}", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "200", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "timer", ".", "ps", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "You", "specify", "which", "{", "@link", "Scheduler", "}", "this", "operator", "will", "use", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2238-L2246", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.interval", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.COMPUTATION)\n    public static Observable<Long> interval(long period, TimeUnit unit) {\n        return interval(period, period, unit, Schedulers.computation());\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.COMPUTATION)\n    public static Observable<Long> interval(long period, TimeUnit unit) {\n        return interval(period, period, unit, Schedulers.computation());\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "COMPUTATION", ")", "public", "static", "Observable", "<", "Long", ">", "interval", "(", "long", "period", ",", "TimeUnit", "unit", ")", "{", "return", "interval", "(", "period", ",", "period", ",", "unit", ",", "Schedulers", ".", "computation", "(", ")", ")", ";", "}"], "docstring": "Returns an Observable that emits a sequential number every specified interval of time.\n<p>\n<img width=\"640\" height=\"195\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/interval.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code interval} operates by default on the {@code computation} {@link Scheduler}.</dd>\n</dl>\n\n@param period\nthe period size in time units (see below)\n@param unit\ntime units to use for the interval size\n@return an Observable that emits a sequential number each time interval\n@see <a href=\"http://reactivex.io/documentation/operators/interval.html\">ReactiveX operators documentation: Interval</a>", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "a", "sequential", "number", "every", "specified", "interval", "of", "time", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "195", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "interval", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "interval", "}", "operates", "by", "default", "on", "the", "{", "@code", "computation", "}", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2264-L2268", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.interval", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public static Observable<Long> interval(long period, TimeUnit unit, Scheduler scheduler) {\n        return interval(period, period, unit, scheduler);\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public static Observable<Long> interval(long period, TimeUnit unit, Scheduler scheduler) {\n        return interval(period, period, unit, scheduler);\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "CUSTOM", ")", "public", "static", "Observable", "<", "Long", ">", "interval", "(", "long", "period", ",", "TimeUnit", "unit", ",", "Scheduler", "scheduler", ")", "{", "return", "interval", "(", "period", ",", "period", ",", "unit", ",", "scheduler", ")", ";", "}"], "docstring": "Returns an Observable that emits a sequential number every specified interval of time, on a\nspecified Scheduler.\n<p>\n<img width=\"640\" height=\"200\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/interval.s.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>You specify which {@link Scheduler} this operator will use.</dd>\n</dl>\n\n@param period\nthe period size in time units (see below)\n@param unit\ntime units to use for the interval size\n@param scheduler\nthe Scheduler to use for scheduling the items\n@return an Observable that emits a sequential number each time interval\n@see <a href=\"http://reactivex.io/documentation/operators/interval.html\">ReactiveX operators documentation: Interval</a>", "docstring_tokens": ["Returns", "an", "Observable", "that", "emits", "a", "sequential", "number", "every", "specified", "interval", "of", "time", "on", "a", "specified", "Scheduler", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "200", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "interval", ".", "s", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "You", "specify", "which", "{", "@link", "Scheduler", "}", "this", "operator", "will", "use", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2289-L2293", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.intervalRange", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.COMPUTATION)\n    public static Observable<Long> intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit) {\n        return intervalRange(start, count, initialDelay, period, unit, Schedulers.computation());\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.COMPUTATION)\n    public static Observable<Long> intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit) {\n        return intervalRange(start, count, initialDelay, period, unit, Schedulers.computation());\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "COMPUTATION", ")", "public", "static", "Observable", "<", "Long", ">", "intervalRange", "(", "long", "start", ",", "long", "count", ",", "long", "initialDelay", ",", "long", "period", ",", "TimeUnit", "unit", ")", "{", "return", "intervalRange", "(", "start", ",", "count", ",", "initialDelay", ",", "period", ",", "unit", ",", "Schedulers", ".", "computation", "(", ")", ")", ";", "}"], "docstring": "Signals a range of long values, the first after some initial delay and the rest periodically after.\n<p>\nThe sequence completes immediately after the last value (start + count - 1) has been reached.\n<p>\n<img width=\"640\" height=\"195\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/intervalRange.png\" alt=\"\">\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code intervalRange} by default operates on the {@link Schedulers#computation() computation} {@link Scheduler}.</dd>\n</dl>\n@param start that start value of the range\n@param count the number of values to emit in total, if zero, the operator emits an onComplete after the initial delay.\n@param initialDelay the initial delay before signalling the first value (the start)\n@param period the period between subsequent values\n@param unit the unit of measure of the initialDelay and period amounts\n@return the new Observable instance", "docstring_tokens": ["Signals", "a", "range", "of", "long", "values", "the", "first", "after", "some", "initial", "delay", "and", "the", "rest", "periodically", "after", ".", "<p", ">", "The", "sequence", "completes", "immediately", "after", "the", "last", "value", "(", "start", "+", "count", "-", "1", ")", "has", "been", "reached", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "195", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "intervalRange", ".", "png", "alt", "=", ">", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2312-L2316", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.intervalRange", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public static Observable<Long> intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit, Scheduler scheduler) {\n        if (count < 0) {\n            throw new IllegalArgumentException(\"count >= 0 required but it was \" + count);\n        }\n\n        if (count == 0L) {\n            return Observable.<Long>empty().delay(initialDelay, unit, scheduler);\n        }\n\n        long end = start + (count - 1);\n        if (start > 0 && end < 0) {\n            throw new IllegalArgumentException(\"Overflow! start + count is bigger than Long.MAX_VALUE\");\n        }\n        ObjectHelper.requireNonNull(unit, \"unit is null\");\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n\n        return RxJavaPlugins.onAssembly(new ObservableIntervalRange(start, end, Math.max(0L, initialDelay), Math.max(0L, period), unit, scheduler));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public static Observable<Long> intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit, Scheduler scheduler) {\n        if (count < 0) {\n            throw new IllegalArgumentException(\"count >= 0 required but it was \" + count);\n        }\n\n        if (count == 0L) {\n            return Observable.<Long>empty().delay(initialDelay, unit, scheduler);\n        }\n\n        long end = start + (count - 1);\n        if (start > 0 && end < 0) {\n            throw new IllegalArgumentException(\"Overflow! start + count is bigger than Long.MAX_VALUE\");\n        }\n        ObjectHelper.requireNonNull(unit, \"unit is null\");\n        ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\n\n        return RxJavaPlugins.onAssembly(new ObservableIntervalRange(start, end, Math.max(0L, initialDelay), Math.max(0L, period), unit, scheduler));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "CUSTOM", ")", "public", "static", "Observable", "<", "Long", ">", "intervalRange", "(", "long", "start", ",", "long", "count", ",", "long", "initialDelay", ",", "long", "period", ",", "TimeUnit", "unit", ",", "Scheduler", "scheduler", ")", "{", "if", "(", "count", "<", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"count >= 0 required but it was \"", "+", "count", ")", ";", "}", "if", "(", "count", "==", "0L", ")", "{", "return", "Observable", ".", "<", "Long", ">", "empty", "(", ")", ".", "delay", "(", "initialDelay", ",", "unit", ",", "scheduler", ")", ";", "}", "long", "end", "=", "start", "+", "(", "count", "-", "1", ")", ";", "if", "(", "start", ">", "0", "&&", "end", "<", "0", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Overflow! start + count is bigger than Long.MAX_VALUE\"", ")", ";", "}", "ObjectHelper", ".", "requireNonNull", "(", "unit", ",", "\"unit is null\"", ")", ";", "ObjectHelper", ".", "requireNonNull", "(", "scheduler", ",", "\"scheduler is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableIntervalRange", "(", "start", ",", "end", ",", "Math", ".", "max", "(", "0L", ",", "initialDelay", ")", ",", "Math", ".", "max", "(", "0L", ",", "period", ")", ",", "unit", ",", "scheduler", ")", ")", ";", "}"], "docstring": "Signals a range of long values, the first after some initial delay and the rest periodically after.\n<p>\nThe sequence completes immediately after the last value (start + count - 1) has been reached.\n<p>\n<img width=\"640\" height=\"195\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/intervalRange.s.png\" alt=\"\">     * <dl>\n<dt><b>Scheduler:</b></dt>\n<dd>you provide the {@link Scheduler}.</dd>\n</dl>\n@param start that start value of the range\n@param count the number of values to emit in total, if zero, the operator emits an onComplete after the initial delay.\n@param initialDelay the initial delay before signalling the first value (the start)\n@param period the period between subsequent values\n@param unit the unit of measure of the initialDelay and period amounts\n@param scheduler the target scheduler where the values and terminal signals will be emitted\n@return the new Observable instance", "docstring_tokens": ["Signals", "a", "range", "of", "long", "values", "the", "first", "after", "some", "initial", "delay", "and", "the", "rest", "periodically", "after", ".", "<p", ">", "The", "sequence", "completes", "immediately", "after", "the", "last", "value", "(", "start", "+", "count", "-", "1", ")", "has", "been", "reached", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "195", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "intervalRange", ".", "s", ".", "png", "alt", "=", ">", "*", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "you", "provide", "the", "{"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2335-L2355", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.just", "original_string": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> just(T item) {\n        ObjectHelper.requireNonNull(item, \"item is null\");\n        return RxJavaPlugins.onAssembly(new ObservableJust<T>(item));\n    }", "language": "java", "code": "@CheckReturnValue\n    @NonNull\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> just(T item) {\n        ObjectHelper.requireNonNull(item, \"item is null\");\n        return RxJavaPlugins.onAssembly(new ObservableJust<T>(item));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "NonNull", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "just", "(", "T", "item", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "item", ",", "\"item is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableJust", "<", "T", ">", "(", "item", ")", ")", ";", "}"], "docstring": "Returns an Observable that signals the given (constant reference) item and then completes.\n<p>\n<img width=\"640\" height=\"290\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/just.item.png\" alt=\"\">\n<p>\nNote that the item is taken and re-emitted as is and not computed by any means by {@code just}. Use {@link #fromCallable(Callable)}\nto generate a single item on demand (when {@code Observer}s subscribe to it).\n<p>\nSee the multi-parameter overloads of {@code just} to emit more than one (constant reference) items one after the other.\nUse {@link #fromArray(Object...)} to emit an arbitrary number of items that are known upfront.\n<p>\nTo emit the items of an {@link Iterable} sequence (such as a {@link java.util.List}), use {@link #fromIterable(Iterable)}.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code just} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param item\nthe item to emit\n@param <T>\nthe type of that item\n@return an Observable that emits {@code value} as a single item and then completes\n@see <a href=\"http://reactivex.io/documentation/operators/just.html\">ReactiveX operators documentation: Just</a>\n@see #just(Object, Object)\n@see #fromCallable(Callable)\n@see #fromArray(Object...)\n@see #fromIterable(Iterable)", "docstring_tokens": ["Returns", "an", "Observable", "that", "signals", "the", "given", "(", "constant", "reference", ")", "item", "and", "then", "completes", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "290", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "just", ".", "item", ".", "png", "alt", "=", ">", "<p", ">", "Note", "that", "the", "item", "is", "taken", "and", "re", "-", "emitted", "as", "is", "and", "not", "computed", "by", "any", "means", "by", "{", "@code", "just", "}", ".", "Use", "{", "@link", "#fromCallable", "(", "Callable", ")", "}", "to", "generate", "a", "single", "item", "on", "demand", "(", "when", "{", "@code", "Observer", "}", "s", "subscribe", "to", "it", ")", ".", "<p", ">", "See", "the", "multi", "-", "parameter", "overloads", "of", "{", "@code", "just", "}", "to", "emit", "more", "than", "one", "(", "constant", "reference", ")", "items", "one", "after", "the", "other", ".", "Use", "{", "@link", "#fromArray", "(", "Object", "...", ")", "}", "to", "emit", "an", "arbitrary", "number", "of", "items", "that", "are", "known", "upfront", ".", "<p", ">", "To", "emit", "the", "items", "of", "an", "{", "@link", "Iterable", "}", "sequence", "(", "such", "as", "a", "{", "@link", "java", ".", "util", ".", "List", "}", ")", "use", "{", "@link", "#fromIterable", "(", "Iterable", ")", "}", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "just", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.merge", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> merge(Iterable<? extends ObservableSource<? extends T>> sources, int maxConcurrency, int bufferSize) {\n        return fromIterable(sources).flatMap((Function)Functions.identity(), false, maxConcurrency, bufferSize);\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> merge(Iterable<? extends ObservableSource<? extends T>> sources, int maxConcurrency, int bufferSize) {\n        return fromIterable(sources).flatMap((Function)Functions.identity(), false, maxConcurrency, bufferSize);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "merge", "(", "Iterable", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ",", "int", "maxConcurrency", ",", "int", "bufferSize", ")", "{", "return", "fromIterable", "(", "sources", ")", ".", "flatMap", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "false", ",", "maxConcurrency", ",", "bufferSize", ")", ";", "}"], "docstring": "Flattens an Iterable of ObservableSources into one ObservableSource, without any transformation, while limiting the\nnumber of concurrent subscriptions to these ObservableSources.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.png\" alt=\"\">\n<p>\nYou can combine the items emitted by multiple ObservableSources so that they appear as a single ObservableSource, by\nusing the {@code merge} method.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code merge} does not operate by default on a particular {@link Scheduler}.</dd>\n<dt><b>Error handling:</b></dt>\n<dd>If any of the source {@code ObservableSource}s signal a {@code Throwable} via {@code onError}, the resulting\n{@code Observable} terminates with that {@code Throwable} and all other source {@code ObservableSource}s are disposed.\nIf more than one {@code ObservableSource} signals an error, the resulting {@code Observable} may terminate with the\nfirst one's error or, depending on the concurrency of the sources, may terminate with a\n{@code CompositeException} containing two or more of the various error signals.\n{@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via\n{@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s\nsignaled by source(s) after the returned {@code Observable} has been disposed or terminated with a\n(composite) error will be sent to the same global error handler.\nUse {@link #mergeDelayError(Iterable, int, int)} to merge sources and terminate only when all source {@code ObservableSource}s\nhave completed or failed with an error.\n</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources\nthe Iterable of ObservableSources\n@param maxConcurrency\nthe maximum number of ObservableSources that may be subscribed to concurrently\n@param bufferSize\nthe number of items to prefetch from each inner ObservableSource\n@return an Observable that emits items that are the result of flattening the items emitted by the\nObservableSources in the Iterable\n@throws IllegalArgumentException\nif {@code maxConcurrent} is less than or equal to 0\n@see <a href=\"http://reactivex.io/documentation/operators/merge.html\">ReactiveX operators documentation: Merge</a>\n@see #mergeDelayError(Iterable, int, int)", "docstring_tokens": ["Flattens", "an", "Iterable", "of", "ObservableSources", "into", "one", "ObservableSource", "without", "any", "transformation", "while", "limiting", "the", "number", "of", "concurrent", "subscriptions", "to", "these", "ObservableSources", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "merge", ".", "png", "alt", "=", ">", "<p", ">", "You", "can", "combine", "the", "items", "emitted", "by", "multiple", "ObservableSources", "so", "that", "they", "appear", "as", "a", "single", "ObservableSource", "by", "using", "the", "{", "@code", "merge", "}", "method", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "merge", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<dt", ">", "<b", ">", "Error", "handling", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "If", "any", "of", "the", "source", "{", "@code", "ObservableSource", "}", "s", "signal", "a", "{", "@code", "Throwable", "}", "via", "{", "@code", "onError", "}", "the", "resulting", "{", "@code", "Observable", "}", "terminates", "with", "that", "{", "@code", "Throwable", "}", "and", "all", "other", "source", "{", "@code", "ObservableSource", "}", "s", "are", "disposed", ".", "If", "more", "than", "one", "{", "@code", "ObservableSource", "}", "signals", "an", "error", "the", "resulting", "{", "@code", "Observable", "}", "may", "terminate", "with", "the", "first", "one", "s", "error", "or", "depending", "on", "the", "concurrency", "of", "the", "sources", "may", "terminate", "with", "a", "{", "@code", "CompositeException", "}", "containing", "two", "or", "more", "of", "the", "various", "error", "signals", ".", "{", "@code", "Throwable", "}", "s", "that", "didn", "t", "make", "into", "the", "composite", "will", "be", "sent", "(", "individually", ")", "to", "the", "global", "error", "handler", "via", "{", "@link", "RxJavaPlugins#onError", "(", "Throwable", ")", "}", "method", "as", "{", "@code", "UndeliverableException", "}", "errors", ".", "Similarly", "{", "@code", "Throwable", "}", "s", "signaled", "by", "source", "(", "s", ")", "after", "the", "returned", "{", "@code", "Observable", "}", "has", "been", "disposed", "or", "terminated", "with", "a", "(", "composite", ")", "error", "will", "be", "sent", "to", "the", "same", "global", "error", "handler", ".", "Use", "{", "@link", "#mergeDelayError", "(", "Iterable", "int", "int", ")", "}", "to", "merge", "sources", "and", "terminate", "only", "when", "all", "source", "{", "@code", "ObservableSource", "}", "s", "have", "completed", "or", "failed", "with", "an", "error", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2802-L2807", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.mergeArray", "original_string": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).flatMap((Function)Functions.identity(), false, maxConcurrency, bufferSize);\n    }", "language": "java", "code": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public static <T> Observable<T> mergeArray(int maxConcurrency, int bufferSize, ObservableSource<? extends T>... sources) {\n        return fromArray(sources).flatMap((Function)Functions.identity(), false, maxConcurrency, bufferSize);\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "mergeArray", "(", "int", "maxConcurrency", ",", "int", "bufferSize", ",", "ObservableSource", "<", "?", "extends", "T", ">", "...", "sources", ")", "{", "return", "fromArray", "(", "sources", ")", ".", "flatMap", "(", "(", "Function", ")", "Functions", ".", "identity", "(", ")", ",", "false", ",", "maxConcurrency", ",", "bufferSize", ")", ";", "}"], "docstring": "Flattens an Iterable of ObservableSources into one ObservableSource, without any transformation, while limiting the\nnumber of concurrent subscriptions to these ObservableSources.\n<p>\n<img width=\"640\" height=\"380\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.png\" alt=\"\">\n<p>\nYou can combine the items emitted by multiple ObservableSources so that they appear as a single ObservableSource, by\nusing the {@code merge} method.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code mergeArray} does not operate by default on a particular {@link Scheduler}.</dd>\n<dt><b>Error handling:</b></dt>\n<dd>If any of the source {@code ObservableSource}s signal a {@code Throwable} via {@code onError}, the resulting\n{@code Observable} terminates with that {@code Throwable} and all other source {@code ObservableSource}s are disposed.\nIf more than one {@code ObservableSource} signals an error, the resulting {@code Observable} may terminate with the\nfirst one's error or, depending on the concurrency of the sources, may terminate with a\n{@code CompositeException} containing two or more of the various error signals.\n{@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via\n{@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s\nsignaled by source(s) after the returned {@code Observable} has been disposed or terminated with a\n(composite) error will be sent to the same global error handler.\nUse {@link #mergeArrayDelayError(int, int, ObservableSource...)} to merge sources and terminate only when all source {@code ObservableSource}s\nhave completed or failed with an error.\n</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources\nthe array of ObservableSources\n@param maxConcurrency\nthe maximum number of ObservableSources that may be subscribed to concurrently\n@param bufferSize\nthe number of items to prefetch from each inner ObservableSource\n@return an Observable that emits items that are the result of flattening the items emitted by the\nObservableSources in the Iterable\n@throws IllegalArgumentException\nif {@code maxConcurrent} is less than or equal to 0\n@see <a href=\"http://reactivex.io/documentation/operators/merge.html\">ReactiveX operators documentation: Merge</a>\n@see #mergeArrayDelayError(int, int, ObservableSource...)", "docstring_tokens": ["Flattens", "an", "Iterable", "of", "ObservableSources", "into", "one", "ObservableSource", "without", "any", "transformation", "while", "limiting", "the", "number", "of", "concurrent", "subscriptions", "to", "these", "ObservableSources", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "380", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "merge", ".", "png", "alt", "=", ">", "<p", ">", "You", "can", "combine", "the", "items", "emitted", "by", "multiple", "ObservableSources", "so", "that", "they", "appear", "as", "a", "single", "ObservableSource", "by", "using", "the", "{", "@code", "merge", "}", "method", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "mergeArray", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<dt", ">", "<b", ">", "Error", "handling", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "If", "any", "of", "the", "source", "{", "@code", "ObservableSource", "}", "s", "signal", "a", "{", "@code", "Throwable", "}", "via", "{", "@code", "onError", "}", "the", "resulting", "{", "@code", "Observable", "}", "terminates", "with", "that", "{", "@code", "Throwable", "}", "and", "all", "other", "source", "{", "@code", "ObservableSource", "}", "s", "are", "disposed", ".", "If", "more", "than", "one", "{", "@code", "ObservableSource", "}", "signals", "an", "error", "the", "resulting", "{", "@code", "Observable", "}", "may", "terminate", "with", "the", "first", "one", "s", "error", "or", "depending", "on", "the", "concurrency", "of", "the", "sources", "may", "terminate", "with", "a", "{", "@code", "CompositeException", "}", "containing", "two", "or", "more", "of", "the", "various", "error", "signals", ".", "{", "@code", "Throwable", "}", "s", "that", "didn", "t", "make", "into", "the", "composite", "will", "be", "sent", "(", "individually", ")", "to", "the", "global", "error", "handler", "via", "{", "@link", "RxJavaPlugins#onError", "(", "Throwable", ")", "}", "method", "as", "{", "@code", "UndeliverableException", "}", "errors", ".", "Similarly", "{", "@code", "Throwable", "}", "s", "signaled", "by", "source", "(", "s", ")", "after", "the", "returned", "{", "@code", "Observable", "}", "has", "been", "disposed", "or", "terminated", "with", "a", "(", "composite", ")", "error", "will", "be", "sent", "to", "the", "same", "global", "error", "handler", ".", "Use", "{", "@link", "#mergeArrayDelayError", "(", "int", "int", "ObservableSource", "...", ")", "}", "to", "merge", "sources", "and", "terminate", "only", "when", "all", "source", "{", "@code", "ObservableSource", "}", "s", "have", "completed", "or", "failed", "with", "an", "error", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2849-L2854", "partition": "test"}
{"repo": "ReactiveX/RxJava", "path": "src/main/java/io/reactivex/Observable.java", "func_name": "Observable.merge", "original_string": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public static <T> Observable<T> merge(ObservableSource<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return RxJavaPlugins.onAssembly(new ObservableFlatMap(sources, Functions.identity(), false, Integer.MAX_VALUE, bufferSize()));\n    }", "language": "java", "code": "@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public static <T> Observable<T> merge(ObservableSource<? extends ObservableSource<? extends T>> sources) {\n        ObjectHelper.requireNonNull(sources, \"sources is null\");\n        return RxJavaPlugins.onAssembly(new ObservableFlatMap(sources, Functions.identity(), false, Integer.MAX_VALUE, bufferSize()));\n    }", "code_tokens": ["@", "CheckReturnValue", "@", "SchedulerSupport", "(", "SchedulerSupport", ".", "NONE", ")", "@", "SuppressWarnings", "(", "{", "\"unchecked\"", ",", "\"rawtypes\"", "}", ")", "public", "static", "<", "T", ">", "Observable", "<", "T", ">", "merge", "(", "ObservableSource", "<", "?", "extends", "ObservableSource", "<", "?", "extends", "T", ">", ">", "sources", ")", "{", "ObjectHelper", ".", "requireNonNull", "(", "sources", ",", "\"sources is null\"", ")", ";", "return", "RxJavaPlugins", ".", "onAssembly", "(", "new", "ObservableFlatMap", "(", "sources", ",", "Functions", ".", "identity", "(", ")", ",", "false", ",", "Integer", ".", "MAX_VALUE", ",", "bufferSize", "(", ")", ")", ")", ";", "}"], "docstring": "Flattens an ObservableSource that emits ObservableSources into a single ObservableSource that emits the items emitted by\nthose ObservableSources, without any transformation.\n<p>\n<img width=\"640\" height=\"370\" src=\"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.oo.png\" alt=\"\">\n<p>\nYou can combine the items emitted by multiple ObservableSources so that they appear as a single ObservableSource, by\nusing the {@code merge} method.\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code merge} does not operate by default on a particular {@link Scheduler}.</dd>\n<dt><b>Error handling:</b></dt>\n<dd>If any of the source {@code ObservableSource}s signal a {@code Throwable} via {@code onError}, the resulting\n{@code Observable} terminates with that {@code Throwable} and all other source {@code ObservableSource}s are disposed.\nIf more than one {@code ObservableSource} signals an error, the resulting {@code Observable} may terminate with the\nfirst one's error or, depending on the concurrency of the sources, may terminate with a\n{@code CompositeException} containing two or more of the various error signals.\n{@code Throwable}s that didn't make into the composite will be sent (individually) to the global error handler via\n{@link RxJavaPlugins#onError(Throwable)} method as {@code UndeliverableException} errors. Similarly, {@code Throwable}s\nsignaled by source(s) after the returned {@code Observable} has been disposed or terminated with a\n(composite) error will be sent to the same global error handler.\nUse {@link #mergeDelayError(ObservableSource)} to merge sources and terminate only when all source {@code ObservableSource}s\nhave completed or failed with an error.\n</dd>\n</dl>\n\n@param <T> the common element base type\n@param sources\nan ObservableSource that emits ObservableSources\n@return an Observable that emits items that are the result of flattening the ObservableSources emitted by the\n{@code source} ObservableSource\n@see <a href=\"http://reactivex.io/documentation/operators/merge.html\">ReactiveX operators documentation: Merge</a>\n@see #mergeDelayError(ObservableSource)", "docstring_tokens": ["Flattens", "an", "ObservableSource", "that", "emits", "ObservableSources", "into", "a", "single", "ObservableSource", "that", "emits", "the", "items", "emitted", "by", "those", "ObservableSources", "without", "any", "transformation", ".", "<p", ">", "<img", "width", "=", "640", "height", "=", "370", "src", "=", "https", ":", "//", "raw", ".", "github", ".", "com", "/", "wiki", "/", "ReactiveX", "/", "RxJava", "/", "images", "/", "rx", "-", "operators", "/", "merge", ".", "oo", ".", "png", "alt", "=", ">", "<p", ">", "You", "can", "combine", "the", "items", "emitted", "by", "multiple", "ObservableSources", "so", "that", "they", "appear", "as", "a", "single", "ObservableSource", "by", "using", "the", "{", "@code", "merge", "}", "method", ".", "<dl", ">", "<dt", ">", "<b", ">", "Scheduler", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "{", "@code", "merge", "}", "does", "not", "operate", "by", "default", "on", "a", "particular", "{", "@link", "Scheduler", "}", ".", "<", "/", "dd", ">", "<dt", ">", "<b", ">", "Error", "handling", ":", "<", "/", "b", ">", "<", "/", "dt", ">", "<dd", ">", "If", "any", "of", "the", "source", "{", "@code", "ObservableSource", "}", "s", "signal", "a", "{", "@code", "Throwable", "}", "via", "{", "@code", "onError", "}", "the", "resulting", "{", "@code", "Observable", "}", "terminates", "with", "that", "{", "@code", "Throwable", "}", "and", "all", "other", "source", "{", "@code", "ObservableSource", "}", "s", "are", "disposed", ".", "If", "more", "than", "one", "{", "@code", "ObservableSource", "}", "signals", "an", "error", "the", "resulting", "{", "@code", "Observable", "}", "may", "terminate", "with", "the", "first", "one", "s", "error", "or", "depending", "on", "the", "concurrency", "of", "the", "sources", "may", "terminate", "with", "a", "{", "@code", "CompositeException", "}", "containing", "two", "or", "more", "of", "the", "various", "error", "signals", ".", "{", "@code", "Throwable", "}", "s", "that", "didn", "t", "make", "into", "the", "composite", "will", "be", "sent", "(", "individually", ")", "to", "the", "global", "error", "handler", "via", "{", "@link", "RxJavaPlugins#onError", "(", "Throwable", ")", "}", "method", "as", "{", "@code", "UndeliverableException", "}", "errors", ".", "Similarly", "{", "@code", "Throwable", "}", "s", "signaled", "by", "source", "(", "s", ")", "after", "the", "returned", "{", "@code", "Observable", "}", "has", "been", "disposed", "or", "terminated", "with", "a", "(", "composite", ")", "error", "will", "be", "sent", "to", "the", "same", "global", "error", "handler", ".", "Use", "{", "@link", "#mergeDelayError", "(", "ObservableSource", ")", "}", "to", "merge", "sources", "and", "terminate", "only", "when", "all", "source", "{", "@code", "ObservableSource", "}", "s", "have", "completed", "or", "failed", "with", "an", "error", ".", "<", "/", "dd", ">", "<", "/", "dl", ">"], "sha": "ac84182aa2bd866b53e01c8e3fe99683b882c60e", "url": "https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2975-L2981", "partition": "test"}